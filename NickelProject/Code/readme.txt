Spectral Data Analysis for Nickel Data
=============

Description
-----------
This project aims to fit gaussians over any line graph that evolves over time. In this case, 
we have many wavelength vs intensity graphs that evolve over 129 frames each.


gaussFit.py 
-----------
- Prompts user to enter a data set, a file, a frame range, and a threshold and loads the file into a table
- Does the following tasks for each frame:
- - Zeros out spectral data such that it lies flush with the x=0 axis
- - Finds peaks over smoothed data to prevent peaks at neighboring indicies, or peaks generated by noise
- - Uses curve fit function to fit a multi gaussian over data
- - Returns the parameters of best fit in a table
- = Exports table to dataset/data directory
- = Exports image to dataset/data with best fit (if it was found)

dataGrouper.py 
--------------
- Prompts user to enter a data directory to be loaded into a table
- Gathers common peaks among the csvs and makes a list of their component centers, intensities, etc
- Forms a master table where each common peak defines a row, and each column contains the lists of
    centers, intensities, frames, etc.
- Forms a second master table that attempts to clump together common peaks. This should gather peaks
    that are the really the same line, but they drift over the evolution of the data.
- Forms a final master table that removes peaks with a 'GOLD' tag or a count of <= 2

autoGaussFit.py 
---------------
- Runs gaussFit.py automatically between frames 0 and 128
- Prevents user from having to manually fit over each file

commonFrames.py
---------------
- Takes in a master file and prompts the user for two peaks
- Scans the peaks' frame lists and finds overlap
- Finds the ratio of the intensities of the peaks per overlapping frame 
- Displays a frames vs ratio graph, if possible

paperComparer.py 
----------------
- Takes in data from the nickel paper's table and compares it to all generated master files

Usage
-----
1. Ensure the input directory contains csv or xlsx files that contain data with rows: frames and cols: wavelength
2. Ensure json paths are correct and that the terminal is navigated to the same directory as the program
3. Run gaussFit and select a file to analyze
4. Enter a frame range
5. Enter a peak threshold
6. (Optional) Run or modify autoGaussFit.py so you can automatically fit gaussians over each file
6. Run dataGrouper to scan a generated file set 
7. Run paperComparer if you compare to data with the paper's format 
8. Run commonFrames.py to generate a plot of common frames between two peaks against their intensity ratios

Output Ex.
----------
- data/2914/0master2914.csv: a table with every recorded peak position, as well as each peaks gaussian 
    parameters and frame number
- data/2914/1master2914.csv: 0master2914.csv, but regroups the peak column into clusters. It aggregates the data for 
    each peak into each cluster
- data/2914/2master2914.csv: 1master2914.csv, but removes instances where nickel and gold data peaks overlap, as well
    as when certain peaks only appear once


